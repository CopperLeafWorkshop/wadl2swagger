---
swagger: '2.0'
info:
  title: orchestration-api
  version: Unknown
consumes:
- application/json
produces:
- application/json
paths:
  "/":
    get:
      operationId: getVersions-heat-v1
      summary: List versions
      description: |
        Lists information about all Orchestration API versions.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "versions": [
                      {
                          "status": "CURRENT",
                          "id": "v1.0",
                          "links": [
                              {
                                  "href": "http://23.253.228.211:8000/v1/",
                                  "rel": "self"
                              }
                          ]
                      }
                  ]
              }
  "/v1/{tenant_id}/stacks":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    post:
      operationId: stack_adopt
      summary: Adopt stack
      description: |
        Creates a stack from existing resources.
      produces:
      - application/json
      responses:
        '201':
          description: 201 response
          examples:
            application/json: |-
              {
                  "status": "COMPLETE",
                  "name": "trove",
                  "template": {
                      "parameters": {
                          "instance_name": {
                              "type": "String",
                              "description": "The database instance name"
                          }
                      },
                      "description": "MYSQL server cloud database instance running on Rackspace cloud",
                      "resources": {
                          "MySqlCloudDatabaseServer": {
                              "type": "OS::Trove::Instance",
                              "properties": {
                                  "flavor": "1GB Instance",
                                  "size": 30,
                                  "users": [
                                      {
                                          "password": "testpass123",
                                          "name": "testuser",
                                          "databases": [
                                              "testdbonetwo"
                                          ]
                                      }
                                  ],
                                  "name": "test-trove-db",
                                  "databases": [
                                      {
                                          "name": "testdbonetwo"
                                      }
                                  ]
                              }
                          }
                      },
                      "heat-template-version": "2014-10-16"
                  },
                  "action": "CREATE",
                  "id": "46c927bb-671a-43db-a29c-16a2610865ca",
                  "resources": {
                      "MySqlCloudDatabaseServer": {
                          "status": "COMPLETE",
                          "name": "MySqlCloudDatabaseServer",
                          "resource_data": {},
                          "resource_id": "74c5be7e-3e62-41e7-b455-93d1c32d56e3",
                          "action": "CREATE",
                          "type": "OS::Trove::Instance",
                          "metadata": {}
                      }
                  }
              }
    get:
      operationId: stack_list
      summary: List stack data
      description: |
        Lists active stacks.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "stacks": [
                      {
                          "description": "HEAT template for deploying a multi-node wordpress deployment on Rackspace Cloud\nusing Cloud Servers, Cloud Load Balancers and Cloud Databases. This version uses\na user-defined template resource to specify the implementation of the web-heads\n",
                          "links": [
                              {
                                  "href": "http://xxxxx/v1/xxxx/stacks/xxxx/11cd9b5e-c7ff-43b5-bff8-b0e7429cd87e",
                                  "rel": "self"
                              }
                          ],
                          "stack_status_reason": "Resource suspend failed: Error: State (u'SUSPEND', u'FAILED') invalid for suspend",
                          "stack_name": "timswp6",
                          "creation_time": "2014-01-30T20:47:57Z",
                          "updated_time": "2014-02-03T18:04:39Z",
                          "stack_status": "SUSPEND_FAILED",
                          "id": "11cd9b5e-c7ff-43b5-bff8-b0e7429cd87e"
                      },
                      {
                          "description": "HEAT template for deploying a multi-node wordpress deployment on Rackspace Cloud\nusing Cloud Servers, Cloud Load Balancers and Cloud Databases. This version uses\na user-defined template resource to specify the implementation of the web-heads\n",
                          "links": [
                              {
                                  "href": "http://xxxx/v1/xxxx/stacks/xxxx/1b2ed5de-9b8c-43fa-9392-1da17b5dee7c",
                                  "rel": "self"
                              }
                          ],
                          "stack_status_reason": "Stack create completed successfully",
                          "stack_name": "timswp5",
                          "creation_time": "2014-01-30T18:18:12Z",
                          "updated_time": "2014-01-30T18:42:07Z",
                          "stack_status": "CREATE_COMPLETE",
                          "id": "1b2ed5de-9b8c-43fa-9392-1da17b5dee7c"
                      }
                  ]
              }
      parameters:
      - name: status
        required: false
        in: query
        type: string
        description: |
          Filters the stack list by the specified status. You can use this filter multiple times to filter by multiple statuses.
      - name: name
        required: false
        in: query
        type: string
        description: |
          Filters the stack list by the specified name.
      - name: limit
        required: false
        in: query
        type: string
        description: |
          Limits the number of stacks that appear on a page to this value. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last stack from the response as the marker parameter in a subsequent limited request.
      - name: marker
        required: false
        in: query
        type: string
        description: |
          Specifies the ID of the last-seen stack. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last stack from the response as the marker parameter in a subsequent limited request.
      - name: sort_keys
        required: false
        in: query
        type: string
        description: |
          Sorts the stack list by one of these attributes: `name`, `status`, `created_at`, or `updated_at`.
      - name: sort_dir
        required: false
        in: query
        type: string
        description: |
          The sort direction of the stack list. Either `asc` (ascending) or `desc` (descending).
  "/v1/{tenant_id}/stacks/preview":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    post:
      operationId: stack_preview
      summary: Preview stack
      description: |
        Previews a stack.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "stack": {
                      "disable_rollback": true,
                      "template_description": "Sample template description.",
                      "parent": null,
                      "stack_status_reason": "",
                      "stack_name": "sample_stack",
                      "creation_time": "2014-02-19T16:04:56Z",
                      "links": [
                          {
                              "href": "http://10.0.2.15:8004/v1/2e327e5e7fa94b25a44be66fd9d1ec4d/stacks/sample_stack/None",
                              "rel": "self"
                          }
                      ],
                      "capabilities": [],
                      "notification_topics": [],
                      "parameters": {
                          "OS::stack_id": "None",
                          "OS::stack_name": "sample_stack",
                          "key_name": "heat_key",
                          "image": "Fedora 19 (Schrodinger's Cat) (PVHVM)",
                          "db_pass": "******",
                          "db_name": "wordpress",
                          "db_root_pass": "******",
                          "db_user_name": "******",
                          "flavor": "1 GB Performance"
                      },
                      "timeout_mins": 60,
                      "stack_status": "_",
                      "updated_time": "2014-02-19T16:04:56Z",
                      "id": "None",
                      "resources": [
                          {
                              "resource_name": "WikiDatabase-1",
                              "resource_identity": {
                                  "stack_id": "None",
                                  "path": "/resources/WikiDatabase-1",
                                  "tenant": "2e327e5e7fa94b25a44be66fd9d1ec4d",
                                  "stack_name": "sample_stack"
                              },
                              "description": "",
                              "stack_identity": {
                                  "stack_id": "None",
                                  "path": "",
                                  "tenant": "2e327e5e7fa94b25a44be66fd9d1ec4d",
                                  "stack_name": "sample_stack"
                              },
                              "stack_name": "sample_stack",
                              "resource_status": "COMPLETE",
                              "updated_time": "2014-02-19T16:04:56Z",
                              "required_by": [],
                              "resource_status_reason": "",
                              "resource_action": "INIT",
                              "physical_resource_id": "",
                              "resource_type": "OS::Nova::Server"
                          },
                          {
                              "other resources...": "other resources..."
                          }
                      ],
                      "description": "Sample template description."
                  }
              }
  "/v1/{tenant_id}/stacks/{stack_name}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    get:
      operationId: stack_find
      summary: Find stack
      description: |
        Finds the canonical URL for a specified stack.
      produces:
      - application/json
      responses:
        '302':
          description: 302 response
          examples:
            application/json: |-
              {
                  "stack": {
                      "disable_rollback": true,
                      "description": "sample stack",
                      "links": [
                          {
                              "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/simple_stack/5333af0c-cc26-47ee-ac3d-8784cefafbd7",
                              "rel": "self"
                          }
                      ],
                      "stack_status_reason": "Stack CREATE completed successfully",
                      "stack_name": "simple_stack",
                      "outputs": [],
                      "creation_time": "2014-06-04T20:36:12Z",
                      "capabilities": [],
                      "notification_topics": [],
                      "updated_time": null,
                      "timeout_mins": null,
                      "stack_status": "CREATE_COMPLETE",
                      "parameters": {
                          "OS::stack_name": "simple_stack",
                          "OS::stack_id": "5333af0c-cc26-47ee-ac3d-8784cefafbd7"
                      },
                      "id": "5333af0c-cc26-47ee-ac3d-8784cefafbd7",
                      "template_description": "sample stack"
                  }
              }
  "/v1/{tenant_id}/stacks/{stack_name}/resources":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    get:
      operationId: stack_resources_find
      summary: Find stack resources
      description: |
        Finds the canonical URL for the resource list of a specified stack.
      produces: []
      responses:
        '302':
          description: 302 response
  "/v1/{tenant_id}/stacks/{stack_name}/events":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    get:
      operationId: stack_events_find
      summary: Find stack events
      description: |
        Finds the canonical URL for the event list of a specified stack.
      produces: []
      responses:
        '302':
          description: 302 response
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    get:
      operationId: stack_show
      summary: Show stack details
      description: |
        Shows details for a specified stack.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "stack": {
                      "disable_rollback": "True",
                      "description": "sample stack",
                      "links": [
                          {
                              "href": "http://192.168.123.200:8004/v1/eb1c63a4f77141548385f113a28f0f52/stacks/simple_stack/3095aefc-09fb-4bc7-b1f0-f21a304e864c",
                              "rel": "self"
                          }
                      ],
                      "stack_status_reason": "Stack CREATE completed successfully",
                      "stack_name": "simple_stack",
                      "outputs": [],
                      "creation_time": "2014-06-03T20:59:46Z",
                      "capabilities": [],
                      "notification_topics": [],
                      "updated_time": "",
                      "timeout_mins": "",
                      "stack_status": "CREATE_COMPLETE",
                      "parameters": {
                          "OS::stack_name": "simple_stack",
                          "OS::stack_id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c"
                      },
                      "id": "3095aefc-09fb-4bc7-b1f0-f21a304e864c",
                      "template_description": "sample stack"
                  }
              }
    put:
      operationId: stack_update
      summary: Update stack
      description: |
        Updates a specified stack.
      produces: []
      responses:
        '202':
          description: 202 response
    delete:
      operationId: stack_delete
      summary: Delete stack
      description: |
        Deletes a specified stack.
      produces:
      - application/json
      responses:
        '204':
          description: 204 response
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/abandon":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    delete:
      operationId: stack_abandon
      summary: Abandon stack
      description: |
        Deletes a specified stack but leaves its resources intact, and returns data describing the stack and its resources.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "status": "COMPLETE",
                  "name": "g",
                  "dry_run": true,
                  "template": {
                      "outputs": {
                          "instance_ip": {
                              "value": {
                                  "str_replace": {
                                      "params": {
                                          "username": "ec2-user",
                                          "hostname": {
                                              "get_attr": [
                                                  "server",
                                                  "first_address"
                                              ]
                                          }
                                      },
                                      "template": "ssh username@hostname"
                                  }
                              }
                          }
                      },
                      "heat_template_version": "2014-10-16",
                      "parameters": {
                          "key_name": {
                              "default": "heat_key",
                              "type": "string"
                          },
                          "image": {
                              "default": "Ubuntu 12.04 LTS (Precise Pangolin)",
                              "type": "string"
                          },
                          "flavor": {
                              "default": "1 GB Performance",
                              "type": "string"
                          }
                      },
                      "resources": {
                          "server": {
                              "type": "OS::Nova::Server",
                              "properties": {
                                  "key_name": {
                                      "get_param": "key_name"
                                  },
                                  "image": {
                                      "get_param": "image"
                                  },
                                  "flavor": {
                                      "get_param": "flavor"
                                  }
                              }
                          }
                      }
                  },
                  "action": "CREATE",
                  "id": "16934ca3-40e0-4fb2-a289-a700662ec05a",
                  "resources": {
                      "server": {
                          "status": "COMPLETE",
                          "name": "server",
                          "resource_data": {},
                          "resource_id": "39d5dad7-7d7a-4cc8-bd84-851e9e2ff4ea",
                          "action": "CREATE",
                          "type": "OS::Nova::Server",
                          "metadata": {}
                      }
                  }
              }
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/actions":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    post:
      operationId: stack_action_resume
      summary: Resume stack
      description: |
        Resumes a suspended stack.
      produces: []
      responses:
        '201':
          description: 201 response
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/events":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    get:
      operationId: stack_event_list
      summary: List stack events
      description: |
        Lists events for a specified stack.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "events": [
                      {
                          "resource_name": "mysql_server",
                          "event_time": "2014-07-23T08:14:47Z",
                          "links": [
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server/events/474bfdf0-a450-46ec-a78a-0c7faa404073",
                                  "rel": "self"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server",
                                  "rel": "resource"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5",
                                  "rel": "stack"
                              }
                          ],
                          "logical_resource_id": "mysql_server",
                          "resource_status": "CREATE_FAILED",
                          "resource_status_reason": "NotFound: Subnet f8a699d0-3537-429e-87a5-6b5a8d0c2bf0 could not be found",
                          "physical_resource_id": null,
                          "id": "474bfdf0-a450-46ec-a78a-0c7faa404073"
                      },
                      {
                          "resource_name": "mysql_server",
                          "event_time": "2014-07-23T08:14:47Z",
                          "links": [
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server/events/66fa95b6-e6f8-4f05-b1af-e828f5aba04c",
                                  "rel": "self"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server",
                                  "rel": "resource"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5",
                                  "rel": "stack"
                              }
                          ],
                          "logical_resource_id": "mysql_server",
                          "resource_status": "CREATE_IN_PROGRESS",
                          "resource_status_reason": "state changed",
                          "physical_resource_id": null,
                          "id": "66fa95b6-e6f8-4f05-b1af-e828f5aba04c"
                      }
                  ]
              }
      parameters:
      - name: resource_action
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_action. You can use this filter multiple times to filter by multiple resource actions: `CREATE`, `DELETE`, `UPDATE`, `ROLLBACK`, `SUSPEND`, `RESUME` or `ADOPT`.
      - name: resource_status
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_status. You can use this filter multiple times to filter by multiple resource statuses: `IN_PROGRESS`, `COMPLETE` or `FAILED`.
      - name: resource_name
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_name. You can use this filter multiple times to filter by multiple resource names.
      - name: resource_type
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_type. You can use this filter multiple times to filter by multiple resource types: `OS::Nova::Server`, `OS::Cinder::Volume`, and so on.
      - name: limit
        required: false
        in: query
        type: string
        description: |
          Limits the number of events that appear on a page to this value. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last event from the response as the marker parameter in a subsequent limited request.
      - name: marker
        required: false
        in: query
        type: string
        description: |
          Specifies the ID of the last-seen event. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last event from the response as the marker parameter in a subsequent limited request.
      - name: sort_keys
        required: false
        in: query
        type: string
        description: |
          Sorts the event list by: `resource_type` or `created_at`.
      - name: sort_dir
        required: false
        in: query
        type: string
        description: |
          The sort direction of the event list. Which is `asc` (ascending) or `desc` (descending).
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    get:
      operationId: resource_list
      summary: List resources
      description: |
        Lists resources in a stack.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "resources": [
                      {
                          "resource_name": "MySqlCloudDatabaseServer",
                          "links": [
                              {
                                  "href": "https://dfw.orchestration.rackspacecloud.com/v1/tenant_id/stacks/trove2/87xxxx1-9xx9-4xxe-bxxf-a7xxxxxd99068/resources/MySqlCloudDatabaseServer",
                                  "rel": "self"
                              },
                              {
                                  "href": "http:s//dfw.orchestration.rackspacecloud.com/v1/tenant_id/stacks/trove2/87xxxx1-9xx9-4xxe-bxxf-a7xxxxx068",
                                  "rel": "stack"
                              }
                          ],
                          "logical_resource_id": "MySqlCloudDatabaseServer",
                          "resource_status_reason": "state changed",
                          "updated_time": "2014-02-05T19:20:31Z",
                          "required_by": [],
                          "resource_status": "CREATE_COMPLETE",
                          "physical_resource_id": "984xxxxxe0-c7x8-4x6e-be15-3f0xxxxx711",
                          "resource_type": "OS::Trove::Instance"
                      }
                  ]
              }
      parameters:
      - name: nested_depth
        required: false
        in: query
        type: string
        description: |
          Also includes resources from nested stacks up to `nested_depth` levels of recursion.
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    - name: resource_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource in the stack.
    get:
      operationId: resource_show
      summary: Show resource data
      description: |
        Shows data for a specified resource.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "resource": {
                      "resource_name": "MySqlCloudDatabaseServer",
                      "description": "",
                      "links": [
                          {
                              "href": "https://dfw.orchestration.rackspacecloud.com/v1/tenant_id/stacks/trove2/87xxxx21-9xx9-4xxxe-bxxf-a7fxxxxx68/resources/MySqlCloudDatabaseServer",
                              "rel": "self"
                          },
                          {
                              "href": "https://dfw.orchestration.rackspacecloud.com/v1/tenant_id/stacks/trove2/87xxxx1-9xx9-4xxe-bxxf-a7fxxxxxx68",
                              "rel": "stack"
                          }
                      ],
                      "logical_resource_id": "MySqlCloudDatabaseServer",
                      "resource_status": "CREATE_COMPLETE",
                      "updated_time": "2014-02-05T19:20:31Z",
                      "required_by": [],
                      "resource_status_reason": "state changed",
                      "physical_resource_id": "98xxx0-cxx8-4xxe-bxx5-3fxxxx11",
                      "resource_type": "OS::Trove::Instance"
                  }
              }
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/events":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    - name: resource_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource in the stack.
    get:
      operationId: resource_event_list
      summary: List resource events
      description: |
        Lists events for a specified stack resource.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "events": [
                      {
                          "resource_name": "mysql_server",
                          "event_time": "2014-07-23T08:14:47Z",
                          "links": [
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server/events/474bfdf0-a450-46ec-a78a-0c7faa404073",
                                  "rel": "self"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server",
                                  "rel": "resource"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5",
                                  "rel": "stack"
                              }
                          ],
                          "logical_resource_id": "mysql_server",
                          "resource_status": "CREATE_FAILED",
                          "resource_status_reason": "NotFound: Subnet f8a699d0-3537-429e-87a5-6b5a8d0c2bf0 could not be found",
                          "physical_resource_id": null,
                          "id": "474bfdf0-a450-46ec-a78a-0c7faa404073"
                      },
                      {
                          "resource_name": "mysql_server",
                          "event_time": "2014-07-23T08:14:47Z",
                          "links": [
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server/events/66fa95b6-e6f8-4f05-b1af-e828f5aba04c",
                                  "rel": "self"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5/resources/mysql_server",
                                  "rel": "resource"
                              },
                              {
                                  "href": "http://192.168.123.200:8004/v1/dc4b074874244f7693dd65583733a758/stacks/teststack/db467ed1-50b5-4a3e-aeb1-396ff1d151c5",
                                  "rel": "stack"
                              }
                          ],
                          "logical_resource_id": "mysql_server",
                          "resource_status": "CREATE_IN_PROGRESS",
                          "resource_status_reason": "state changed",
                          "physical_resource_id": null,
                          "id": "66fa95b6-e6f8-4f05-b1af-e828f5aba04c"
                      }
                  ]
              }
      parameters:
      - name: resource_action
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_action. You can use this filter multiple times to filter by multiple resource actions: `CREATE`, `DELETE`, `UPDATE`, `ROLLBACK` or `ADOPT`.
      - name: resource_status
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_status. You can use this filter multiple times to filter by multiple resource statuses: `IN_PROGRESS`, `COMPLETE` or `FAILED`.
      - name: resource_name
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_name. You can use this filter multiple times to filter by multiple resource names.
      - name: resource_type
        required: false
        in: query
        type: string
        description: |
          Filters the event list by the specified resource\_type. You can use this filter multiple times to filter by multiple resource types: `OS::Nova::Server`, `OS::Cinder::Volume`, and so on.
      - name: limit
        required: false
        in: query
        type: string
        description: |
          Limits the number of events that appear on a page to this value. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last event from the response as the marker parameter in a subsequent limited request.
      - name: marker
        required: false
        in: query
        type: string
        description: |
          Specifies the ID of the last-seen event. The typical pattern of limit and marker is to make an initial limited request and then to use the ID of the last event from the response as the marker parameter in a subsequent limited request.
      - name: sort_keys
        required: false
        in: query
        type: string
        description: |
          Sorts the event list by: `resource_type` or `created_at`.
      - name: sort_dir
        required: false
        in: query
        type: string
        description: |
          The sort direction of the event list. Which is `asc` (ascending) or `desc` (descending).
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/metadata":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    - name: resource_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource in the stack.
    get:
      operationId: resource_metadata
      summary: Show resource metadata
      description: |
        Shows metadata for a specified resource.
      produces: []
      responses:
        '200':
          description: 200 response
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/signal":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    - name: resource_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource in the stack.
    post:
      operationId: resource_signal
      summary: Send a signal to a resource
      description: |
        Sends a signal to a specified resource.
      produces: []
      responses:
        '200':
          description: 200 response
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/resources/{resource_name}/events/{event_id}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    - name: resource_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource in the stack.
    - name: event_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of an event related to the resource in the stack.
    get:
      operationId: event_show
      summary: Show event details
      description: |
        Shows details for a specified event.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "event": {
                      "resource_name": "lb",
                      "event_time": "2014-01-31T20:08:15Z",
                      "links": [
                          {
                              "href": "http://hostname/v1/1234/stacks/mystack/56789/resources/lb/events/f4874455-6505-42b4-af84-114bba2483a5",
                              "rel": "self"
                          },
                          {
                              "href": "http://hostname/v1/1234/stacks/mystack/56789/resources/lb",
                              "rel": "resource"
                          },
                          {
                              "href": "http://hostname/v1/1234/stacks/mystack/56789",
                              "rel": "stack"
                          }
                      ],
                      "logical_resource_id": "lb",
                      "resource_status": "CREATE_COMPLETE",
                      "resource_status_reason": "state changed",
                      "physical_resource_id": "098765",
                      "resource_properties": {
                          "virtualIps": [
                              {
                                  "ipVersion": "IPV4",
                                  "type": "PUBLIC"
                              }
                          ],
                          "protocol": "HTTP",
                          "algorithm": "LEAST_CONNECTIONS",
                          "connectionThrottle": {
                              "maxConnectionRate": 50,
                              "minConnections": 50,
                              "rateInterval": 50,
                              "maxConnections": 50
                          },
                          "port": 80,
                          "timeout": 120,
                          "name": "lb-Wordpress Webserver",
                          "accessList": null,
                          "contentCaching": "ENABLED",
                          "healthMonitor": {
                              "attemptsBeforeDeactivation": 3,
                              "delay": 10,
                              "statusRegex": ".",
                              "bodyRegex": ".",
                              "hostHeader": null,
                              "timeout": 10,
                              "path": "/",
                              "type": "HTTP"
                          },
                          "errorPage": null,
                          "halfClosed": false,
                          "connectionLogging": null,
                          "sessionPersistence": "HTTP_COOKIE",
                          "nodes": [
                              {
                                  "weight": null,
                                  "type": null,
                                  "addresses": [
                                      "1.2.3.4",
                                      "4.5.6.7"
                                  ],
                                  "condition": "ENABLED",
                                  "port": 80
                              }
                          ],
                          "sslTermination": null,
                          "metadata": null
                      },
                      "id": "f4874455-6505-42b4-af84-114bba2483a5",
                      "resource_type": "Rackspace::Cloud::LoadBalancer"
                  }
              }
  "/v1/{tenant_id}/stacks/{stack_name}/{stack_id}/template":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: stack_name
      required: true
      in: path
      type: string
      description: |
        The name of the stack. The name must satisfy both of the following requirements: 1) It must start with an alphabetic character. 2) It must contain only alphanumeric characters or '\_', '-', or '.' characters.
    - name: stack_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier for a stack.
    get:
      operationId: stack_template
      summary: Get stack template
      description: |
        Gets a template for a specified stack.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "heat_template_version": "2014-10-16",
                  "description": "Heat Orchestration Template that spins up a single server",
                  "parameters": {
                      "compute_image": {
                          "default": "Ubuntu 13.10 (Saucy Salamander)",
                          "type": "String",
                          "description": "The Image to use for the host OS.",
                          "constraints": [
                              {
                                  "description": "Must be a valid Rackspace Cloud Server image name.",
                                  "allowed_values": [
                                      "Ubuntu 13.10 (Saucy Salamander)",
                                      "Ubuntu 12.10 (Quantal Quetzal)"
                                  ]
                              }
                          ]
                      },
                      "compute_flavor": {
                          "default": "2 GB Performance",
                          "type": "String",
                          "description": "flavor id for the compute instance",
                          "constraints": [
                              {
                                  "description": "Must be a valid Rackspace Cloud Server flavor.",
                                  "allowed_values": [
                                      "1 GB Performance",
                                      "2 GB Performance",
                                      "4 GB Performance",
                                      "8 GB Performance",
                                      "16 GB Performance"
                                  ]
                              }
                          ]
                      }
                  },
                  "resources": {
                      "server_instance": {
                          "type": "OS::Nova::Server",
                          "properties": {
                              "flavor": {
                                  "get_param": "compute_flavor"
                              },
                              "image": {
                                  "get_param": "compute_image"
                              },
                              "name": "Single Node Compute Instance"
                          }
                      }
                  }
              }
  "/v1/{tenant_id}/validate":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    post:
      operationId: template_validate
      summary: Validate template
      description: |
        Validates a specified template.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "Description": "A template implementation of a resource that provides a single MongoDB server instance\n",
                  "Parameters": {
                      "key_name": {
                          "Required": true,
                          "Type": "String",
                          "Description": "Nova keypair name for ssh access to the server"
                      },
                      "flavor": {
                          "Default": "1GB Standard Instance",
                          "Type": "String",
                          "Description": "Rackspace Cloud Server flavor",
                          "constraints": [
                              {
                                  "description": "must be a valid Rackspace Cloud Server flavor.",
                                  "allowed_values": [
                                      "512MB Standard Instance",
                                      "1GB Standard Instance",
                                      "2GB Standard Instance",
                                      "4GB Standard Instance",
                                      "8GB Standard Instance",
                                      "15GB Standard Instance",
                                      "30GB Standard Instance"
                                  ]
                              }
                          ]
                      },
                      "server_name": {
                          "Default": "MongoDB_One",
                          "Type": "String",
                          "Description": "the instance name"
                      }
                  }
              }
  "/v1/{tenant_id}/resource_types":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    get:
      operationId: resource_type_list
      summary: List resource types
      description: |
        Lists the supported template resource types.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "resource_types": [
                      "OS::Nova::Server",
                      "OS::Heat::RandomString",
                      "OS::Swift::Container",
                      "Rackspace::Cloud::Server",
                      "OS::Heat::ChefSolo",
                      "Rackspace::AutoScale::WebHook",
                      "Rackspace::AutoScale::Group",
                      "Rackspace::Cloud::Network",
                      "OS::Cinder::Volume",
                      "Rackspace::Cloud::WinServer",
                      "Rackspace::Cloud::LoadBalancer",
                      "OS::Heat::ResourceGroup",
                      "Rackspace::AutoScale::ScalingPolicy",
                      "Rackspace::Cloud::DNS",
                      "OS::Trove::Instance",
                      "OS::Nova::FloatingIPAssociation",
                      "OS::Cinder::VolumeAttachment",
                      "OS::Nova::FloatingIP",
                      "OS::Nova::KeyPair"
                  ]
              }
  "/v1/{tenant_id}/resource_types/{type_name}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: type_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource type.
    get:
      operationId: resource_type_get
      summary: Show resource schema
      description: |
        Shows the interface schema for a specified resource type. This schema describes the properties that can be set on the resource, their types, constraints, descriptions, and default values. Additionally, the resource attributes and their descriptions are provided.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "attributes": {
                      "an_attribute": {
                          "description": "A runtime value of the resource"
                      }
                  },
                  "properties": {
                      "a_property": {
                          "type": "string",
                          "required": true,
                          "update_allowed": false,
                          "description": "A resource description.",
                          "constraints": [
                              {
                                  "length": {
                                      "max": 255,
                                      "min": 1
                                  },
                                  "description": "Must be between 1 and 255 characters"
                              }
                          ]
                      }
                  },
                  "resource_type": "OS::Heat::AResourceName"
              }
  "/v1/{tenant_id}/resource_types/{type_name}/template":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: type_name
      required: true
      in: path
      type: string
      description: |
        The name of a resource type.
    get:
      operationId: resource_type_template
      summary: Show resource template
      description: |
        Shows the template representation for a specified resource type. The returned template contains a single resource of the specified type. Each resource property is mapped to a template parameter and each resource attribute is mapped to a template output. These templates can be used as a starting place for created customized template-based resources or as examples of using the particular resource in another template.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "Outputs": {
                      "public_key": {
                          "Description": "The public key.",
                          "Value": "{\"Fn::GetAtt\": [\"KeyPair\", \"public_key\"]}"
                      },
                      "private_key": {
                          "Description": "The private key if it has been saved.",
                          "Value": "{\"Fn::GetAtt\": [\"KeyPair\", \"private_key\"]}"
                      }
                  },
                  "HeatTemplateFormatVersion": "2012-12-12",
                  "Resources": {
                      "KeyPair": {
                          "Type": "OS::Nova::KeyPair",
                          "Properties": {
                              "public_key": {
                                  "Ref": "public_key"
                              },
                              "name": {
                                  "Ref": "name"
                              },
                              "save_private_key": {
                                  "Ref": "save_private_key"
                              }
                          }
                      }
                  },
                  "Parameters": {
                      "public_key": {
                          "Type": "String",
                          "Description": "The optional public key. This allows users to supply the public key from a pre-existing key pair. If not supplied, a new key pair will be generated."
                      },
                      "name": {
                          "Type": "String",
                          "Description": "The name of the key pair."
                      },
                      "save_private_key": {
                          "Default": false,
                          "Type": "String",
                          "Description": "True if the system should remember a generated private key; False otherwise.",
                          "AllowedValues": [
                              "True",
                              "true",
                              "False",
                              "false"
                          ]
                      }
                  }
              }
  "/v1/{tenant_id}/build_info":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    get:
      operationId: build_info_show
      summary: Show build information
      description: |
        Shows build information for a heat deployment.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "engine": {
                      "revision": "{engine_build_revision}"
                  },
                  "api": {
                      "revision": "{api_build_revision}"
                  }
              }
  "/v1/{tenant_id}/software_configs":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    post:
      operationId: software_config_create
      summary: Create configuration
      description: |
        Creates a software configuration.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_config": {
                      "inputs": [
                          {
                              "default": null,
                              "type": "String",
                              "name": "foo",
                              "description": null
                          },
                          {
                              "default": null,
                              "type": "String",
                              "name": "bar",
                              "description": null
                          }
                      ],
                      "group": "script",
                      "name": "a-config-we5zpvyu7b5o",
                      "outputs": [
                          {
                              "type": "String",
                              "name": "result",
                              "error_output": false,
                              "description": null
                          }
                      ],
                      "id": "ddee7aca-aa32-4335-8265-d436b20db4f1",
                      "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2",
                      "options": null
                  }
              }
  "/v1/{tenant_id}/software_configs/{config_id}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: config_id
      required: true
      in: path
      type: string
      description: |
        The ID of the configuration.
    get:
      operationId: software_config_show
      summary: Show configuration details
      description: |
        Shows details for a software configuration.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_config": {
                      "inputs": [
                          {
                              "default": null,
                              "type": "String",
                              "name": "foo",
                              "description": null
                          },
                          {
                              "default": null,
                              "type": "String",
                              "name": "bar",
                              "description": null
                          }
                      ],
                      "group": "script",
                      "name": "a-config-we5zpvyu7b5o",
                      "outputs": [
                          {
                              "type": "String",
                              "name": "result",
                              "error_output": false,
                              "description": null
                          }
                      ],
                      "id": "ddee7aca-aa32-4335-8265-d436b20db4f1",
                      "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2",
                      "options": null
                  }
              }
    delete:
      operationId: software_config_delete
      summary: Delete config
      description: |
        Deletes a software configuration.
      produces: []
      responses:
        '204':
          description: 204 response
  "/v1/{tenant_id}/software_deployments":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    get:
      operationId: software_deployment_index
      summary: List deployments
      description: |
        Lists all available software deployments.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_deployments": [
                      {
                          "status": "COMPLETE",
                          "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                          "config_id": "8da95794-2ad9-4979-8ae5-739ce314c5cd",
                          "output_values": {
                              "deploy_stdout": "Writing to /tmp/barmy\nWritten to /tmp/barmy\n",
                              "deploy_stderr": "+ echo Writing to /tmp/barmy\n+ echo fu\n+ cat /tmp/barmy\n+ echo -n The file /tmp/barmy contains fu for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE\n+ echo Written to /tmp/barmy\n+ echo Output to stderr\nOutput to stderr\n",
                              "deploy_status_code": 0,
                              "result": "The file /tmp/barmy contains fu for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE"
                          },
                          "input_values": null,
                          "action": "CREATE",
                          "status_reason": "Outputs received",
                          "id": "ef422fa5-719a-419e-a10c-72e3a367b0b8"
                      }
                  ]
              }
    post:
      operationId: software_deployment_create
      summary: Create deployment
      description: |
        Creates a software deployment.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_deployment": {
                      "status": "IN_PROGRESS",
                      "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                      "config_id": "8da95794-2ad9-4979-8ae5-739ce314c5cd",
                      "output_values": null,
                      "input_values": null,
                      "action": "CREATE",
                      "status_reason": "Deploy data available",
                      "id": "ef422fa5-719a-419e-a10c-72e3a367b0b8"
                  }
              }
  "/v1/{tenant_id}/software_deployments/{deployment_id}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: deployment_id
      required: true
      in: path
      type: string
      description: |
        The ID of the deployment.
    get:
      operationId: software_deployment_show
      summary: Show deployment details
      description: |
        Shows details for a specified software deployment.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_deployment": {
                      "status": "IN_PROGRESS",
                      "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                      "config_id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434",
                      "output_values": null,
                      "input_values": null,
                      "action": "CREATE",
                      "status_reason": "Deploy data available",
                      "id": "06e87bcc-33a2-4bce-aebd-533e698282d3"
                  }
              }
    put:
      operationId: software_deployment_update
      summary: Update deployment
      description: |
        Updates a specified software deployment.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "software_deployment": {
                      "status": "COMPLETE",
                      "server_id": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                      "config_id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434",
                      "output_values": {
                          "deploy_stdout": "Writing to /tmp/baaaaa\nWritten to /tmp/baaaaa\n",
                          "deploy_stderr": "+ echo Writing to /tmp/baaaaa\n+ echo fooooo\n+ cat /tmp/baaaaa\n+ echo -n The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE\n+ echo Written to /tmp/baaaaa\n+ echo Output to stderr\nOutput to stderr\n",
                          "deploy_status_code": 0,
                          "result": "The file /tmp/baaaaa contains fooooo for server ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5 during CREATE"
                      },
                      "input_values": null,
                      "action": "CREATE",
                      "status_reason": "Outputs received",
                      "id": "06e87bcc-33a2-4bce-aebd-533e698282d3"
                  }
              }
    delete:
      operationId: software_deployment_delete
      summary: Delete deployment
      description: |
        Deletes a specified software deployment.
      produces: []
      responses:
        '204':
          description: 204 response
  "/v1/{tenant_id}/software_deployments/metadata/{server_id}":
    parameters:
    - name: tenant_id
      required: true
      in: path
      type: string
      description: |
        The unique identifier of the tenant or account.
    - name: server_id
      required: true
      in: path
      type: string
      description: |
        The ID of the server for which to fetch configuration metadata.
    get:
      operationId: software_deployment_metadata
      summary: Show server configuration metadata
      description: |
        Shows the deployment configuration metadata for a specified server.
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          examples:
            application/json: |-
              {
                  "metadata": [
                      {
                          "inputs": [
                              {
                                  "default": null,
                                  "type": "String",
                                  "name": "foo",
                                  "value": "fooooo",
                                  "description": null
                              },
                              {
                                  "default": null,
                                  "type": "String",
                                  "name": "bar",
                                  "value": "baaaaa",
                                  "description": null
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_server_id",
                                  "value": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                                  "description": "ID of the server being deployed to"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_action",
                                  "value": "CREATE",
                                  "description": "Name of the current action being deployed"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_stack_id",
                                  "value": "a/9bd57090-8954-48ab-bab9-adf9e1ac70fc",
                                  "description": "ID of the stack this deployment belongs to"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_resource_name",
                                  "value": "deployment",
                                  "description": "Name of this deployment resource in the stack"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_signal_id",
                                  "value": "http://192.168.20.103:8000/v1/signal/arn%3Aopenstack%3Aheat%3A%3Ae2a84fbdaeb047ae8da4b503f3b69f1f%3Astacks%2Fa%2F9bd57090-8954-48ab-bab9-adf9e1ac70fc%2Fresources%2Fdeployment?Timestamp=2014-03-19T20%3A30%3A59Z&SignatureMethod=HmacSHA256&AWSAccessKeyId=ca3571413e4a49998d580215517b3685&SignatureVersion=2&Signature=w6Iu%2BNbg86mqwSOUf1GLuKPO7KaD82PiGpL4ig9Q1l4%3D",
                                  "description": "ID of signal to use for signalling output values"
                              }
                          ],
                          "group": "script",
                          "name": "a-config-we5zpvyu7b5o",
                          "outputs": [
                              {
                                  "type": "String",
                                  "name": "result",
                                  "error_output": false,
                                  "description": null
                              }
                          ],
                          "id": "3d5ec2a8-7004-43b6-a7f6-542bdbe9d434",
                          "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2",
                          "options": null
                      },
                      {
                          "inputs": [
                              {
                                  "default": null,
                                  "type": "String",
                                  "name": "foo",
                                  "value": "fu",
                                  "description": null
                              },
                              {
                                  "default": null,
                                  "type": "String",
                                  "name": "bar",
                                  "value": "barmy",
                                  "description": null
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_server_id",
                                  "value": "ec14c864-096e-4e27-bb8a-2c2b4dc6f3f5",
                                  "description": "ID of the server being deployed to"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_action",
                                  "value": "CREATE",
                                  "description": "Name of the current action being deployed"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_stack_id",
                                  "value": "a/9bd57090-8954-48ab-bab9-adf9e1ac70fc",
                                  "description": "ID of the stack this deployment belongs to"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_resource_name",
                                  "value": "other_deployment",
                                  "description": "Name of this deployment resource in the stack"
                              },
                              {
                                  "type": "String",
                                  "name": "deploy_signal_id",
                                  "value": "http://192.168.20.103:8000/v1/signal/arn%3Aopenstack%3Aheat%3A%3Ae2a84fbdaeb047ae8da4b503f3b69f1f%3Astacks%2Fa%2F9bd57090-8954-48ab-bab9-adf9e1ac70fc%2Fresources%2Fother_deployment?Timestamp=2014-03-19T20%3A30%3A59Z&SignatureMethod=HmacSHA256&AWSAccessKeyId=7b761482f8254946bcd3d5ccb36fe939&SignatureVersion=2&Signature=giMfv%2BhrAw6y%2FCMKQIQz2IhO5PkAj5%2BfP5YsL6rul3o%3D",
                                  "description": "ID of signal to use for signalling output values"
                              }
                          ],
                          "group": "script",
                          "name": "a-config-we5zpvyu7b5o",
                          "outputs": [
                              {
                                  "type": "String",
                                  "name": "result",
                                  "error_output": false,
                                  "description": null
                              }
                          ],
                          "id": "8da95794-2ad9-4979-8ae5-739ce314c5cd",
                          "config": "#!/bin/sh -x\necho \"Writing to /tmp/$bar\"\necho $foo > /tmp/$bar\necho -n \"The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action\" > $heat_outputs_path.result\necho \"Written to /tmp/$bar\"\necho \"Output to stderr\" 1>&2",
                          "options": null
                      }
                  ]
              }
